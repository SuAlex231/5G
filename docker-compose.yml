version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: ticketing_postgres
    environment:
      POSTGRES_DB: ticketing_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: ticketing_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: ticketing_minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend FastAPI Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ticketing_backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ticketing_worker
    command: celery -A app.worker worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
      - minio
      - backend
    volumes:
      - ./backend:/app

  # OCR Microservice
  ocr:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: ticketing_ocr
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Web Application
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: http://localhost:8000
    container_name: ticketing_web
    ports:
      - "5173:5173"
    depends_on:
      - backend
    volumes:
      - ./web:/app
      - /app/node_modules

volumes:
  postgres_data:
  minio_data:

networks:
  default:
    name: ticketing_network