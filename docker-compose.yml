version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: 5g-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-5g_ticketing}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - 5g-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: 5g-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - 5g-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: 5g-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - 5g-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 5g-backend
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/5g_ticketing}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      MINIO_BUCKET_UPLOADS: ${MINIO_BUCKET_UPLOADS:-uploads}
      MINIO_BUCKET_EXPORTS: ${MINIO_BUCKET_EXPORTS:-exports}
      OCR_SERVICE_URL: ${OCR_SERVICE_URL:-http://ocr:8001}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-me-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      MAX_IMAGES_PER_TICKET: ${MAX_IMAGES_PER_TICKET:-8}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:5173}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - 5g-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: 5g-worker
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/5g_ticketing}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      MINIO_BUCKET_UPLOADS: ${MINIO_BUCKET_UPLOADS:-uploads}
      MINIO_BUCKET_EXPORTS: ${MINIO_BUCKET_EXPORTS:-exports}
      OCR_SERVICE_URL: ${OCR_SERVICE_URL:-http://ocr:8001}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-me-in-production}
      MAX_IMAGES_PER_TICKET: ${MAX_IMAGES_PER_TICKET:-8}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    networks:
      - 5g-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      ocr:
        condition: service_started
    volumes:
      - ./backend:/app
    command: celery -A app.worker.celery worker --loglevel=info

  ocr:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: 5g-ocr
    ports:
      - "${OCR_PORT:-8001}:8001"
    networks:
      - 5g-network
    volumes:
      - ./ocr-service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000}
    container_name: 5g-web
    ports:
      - "${WEB_PORT:-5173}:5173"
    networks:
      - 5g-network
    depends_on:
      - backend
    volumes:
      - ./web:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0 --port 5173

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  5g-network:
    driver: bridge